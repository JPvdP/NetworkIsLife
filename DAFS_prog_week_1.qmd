---
title: "Week 1: The programming basics"
---

# 0. Overview
For this first session, the goal for you is to learn the following operations:

|                                                        | R                                | Python                            | Example R                                 | Example Python                         |
|--------------------------------------------------------|----------------------------------|-----------------------------------|-------------------------------------------|----------------------------------------|
| Load a library                                         | <input type="checkbox">          | <input type="checkbox">           | library(dplyr)                            | import pandas as pd                    |
| Create a variable                                      | <input type="checkbox">          | <input type="checkbox">           | value <- 42                               | value = 42                             |
| Difference between text, values, and variables         | <input type="checkbox">          | <input type="checkbox">           | plop <- "42"  plop <- 42 plop <- fourtytwo | plop = "42" plop = 42 plop = fourtytwo |
| Paste                                                  | <input type="checkbox">          | <input type="checkbox">           | paste("the value is ", plop)              | f"The value is {plop}                  |
| Print                                                  | <input type="checkbox">          | <input type="checkbox">           | print(paste("the value is ", plop))       | print(f"The value is {plop}")          |
| Basic arithmetics                                      | <input type="checkbox">          | <input type="checkbox">           | 42 + 48                                   | 42 + 48                                |
| Vectors and lists                                      | <input type="checkbox">          | <input type="checkbox">           | c(1,2,3,4,68)                             | [1,2,3,4,68]                           |
| Use a function                                         | <input type="checkbox">          | <input type="checkbox">           | max(c(1,2,3,4,68))                        | max([1,2,3,4,68])                      |
| Use a function from a script                           | <input type="checkbox">          | <input type="checkbox">           |                                           |                                        |
| Use logic operators                                  | <input type="checkbox">          | <input type="checkbox">           | a != b                                    | a != b                                 |



## 1. Loading and installing libaries

R and Python come with basic, build-in functions. This means that when you launch R/Python you can use these functions directly.
This is the case for the **print** function for example.

::: columns
::: {.column width="45%"}
![](Rlogo.png)

```{r}
print("This is how we use the print function in R")
```
:::

::: {.column width="10%"}
<!-- empty column to create gap -->
:::

::: {.column width="45%"}
![](Pythonlogo.png)

```{python}
print("This is how we use the print function in Python")
```
:::
:::

Think of Python as a basic toolbox. This toolbox comes with some essential tools, like a hammer (the print() function), a screwdriver (the len() function), and a measuring tape (the max() function). These tools are available right away because they’re built into the toolbox (Python).

However, sometimes you need more specialized tools that aren’t in the basic toolbox. For example, if you want to build a bookshelf, you might need a power drill or a saw. These tools aren't included by default in the basic toolbox. In the world of Python, these extra tools are called packages.

A package is like an extra toolbox full of new tools (functions) that someone else has created for a specific purpose. For example:

If you want to work with data in tables (like Excel), you'd install the pandas package.
If you want to make graphs, you might need the matplotlib package.
When you install a package, it's like going to the store, buying the specialized toolbox, and adding it to your existing set of tools. Once installed, you can use the new tools (functions) it provides.

Let's see how we install packages in R and python:


::: columns
::: {.column width="45%"}
![](Rlogo.png)

```{r, eval=FALSE}
install.packages("dplyr")
```
:::

::: {.column width="10%"}
<!-- empty column to create gap -->
:::

::: {.column width="45%"}
![](Pythonlogo.png)

```{python, eval = FALSE}
pip install pandas
```
:::
:::

We only have to install packages once. Once they are installed we only need to thell R/Python that we want to use the functions from these packages. we do this in the following way:

::: columns
::: {.column width="45%"}
![](Rlogo.png)

```{r, eval=FALSE}
library(dplyr)
```
:::

::: {.column width="10%"}
<!-- empty column to create gap -->
:::

::: {.column width="45%"}
![](Pythonlogo.png)

```{python, eval=FALSE}
import pandas
```
:::
:::


You only have to load the packages once when you start working. Reload is only necessary if you have quit R/Python. Usually when you get the following error messages, this means that you did not load the package and therefore R/python cannot find the function you are trying to load:


::: columns
::: {.column width="45%"}
![](Rlogo.png)

```{r, eval=FALSE}
x = add.image(plop)
Error in add.image(plop) : could not find function "add.image"
```
:::

::: {.column width="10%"}
<!-- empty column to create gap -->
:::

::: {.column width="45%"}
![](Pythonlogo.png)

```{python, eval=FALSE}
df = pd.Dataframe()
NameError: name 'pd' is not defined
```
:::
:::


::: {.callout-note}
### Exercises part 1:

1. **Install required packages in R**:  
   Install the following packages in R: tidyverse, ggplot2, igraph

2. **Install required packages in Python**: 
   Install the following packages in Python: pandas, numpy, matplotlib

:::







## 2. Create a variable

A variable is like a container or a labeled storage box that holds data or information. In programming, we use variables to store values—such as numbers, text, or more complex data—so that we can easily refer to and manipulate them throughout our code.

Why do we create variables?

-  **Convenience**: Instead of typing the same value repeatedly, we store it in a variable and use the variable’s name. For example, if you store a value like 42 in a variable called age, you can use age throughout your program instead of the number 42.
-  **Flexibility**: Variables allow us to use information that may change over time. If you store a value in a variable, you can update the variable's content later without having to rewrite your entire program. For example, a variable temperature could hold the temperature of a room, which you might update as the temperature changes.
-  **Reusability**: Once you've stored a value in a variable, you can reuse it as many times as you want in your program. This avoids repetition and makes the code cleaner.



::: columns
::: {.column width="45%"}
![](Rlogo.png)

```{r}
# without variables
print(20 + 30)

# With variables

a <- 20
b <- 30
result <- a + b
print(result)

```
:::

::: {.column width="10%"}
<!-- empty column to create gap -->
:::

::: {.column width="45%"}
![](Pythonlogo.png)

```{python}
# without variables
print(20 + 30)

# With variables

a = 20
b = 30
result = a + b
print(result)
```
:::
:::

Creating the variables *a*, *b* and *result*, allows us to use them later in the code. Beyond simple numerical values, other variables are created in an identical manner. In R, using "<-" assigns the value/object on the right to the variable on the left. In python the logic is the same, but we use the "=" operator.



::: columns
::: {.column width="45%"}
![](Rlogo.png)

```{r}
Small_matrix <- matrix(0,nrow = 3, ncol = 3)
# this creates a variables called Small_matrix that is an empty 3x3 matrix.
print(Small_matrix)
```
:::

::: {.column width="10%"}
<!-- empty column to create gap -->
:::

::: {.column width="45%"}
![](Pythonlogo.png)

```{python}
# in python we first need to load a package to use a function to create a matrix
# we load numpy
import numpy as np

# then we create a matrix called "small_matrix"
# this matrix is created by the "zeros" function from the np (numpy) package
small_matrix = np.zeros((3, 3))
print(small_matrix)
```
:::
:::

In the examples above, we create a new variables *small_matrix* which contains a matrix. We can then use this later by referring to the name of the object. Below we add 3 to each cell of the matrix:

::: columns
::: {.column width="45%"}
![](Rlogo.png)

```{r, eval=FALSE}
Small_matrix <- Small_matrix + 3
```
:::

::: {.column width="10%"}
<!-- empty column to create gap -->
:::

::: {.column width="45%"}
![](Pythonlogo.png)

```{python, eval=FALSE}
Small_matrix = Small_matrix + 3
```
:::
:::

By writing the same name on the left and righ, the object *Small_matrix* is replaced by *Small_matrix + 3* which means tha we cannot go back to the initial *Small_matrix* filled with 0's.

If we want to keep both variables, we need can create a new variables:

::: columns
::: {.column width="45%"}
![](Rlogo.png)

```{r, eval=FALSE}
Small_matrix_3 <- Small_matrix + 3
```
:::

::: {.column width="10%"}
<!-- empty column to create gap -->
:::

::: {.column width="45%"}
![](Pythonlogo.png)

```{python, eval=FALSE}
Small_matrix_3 = Small_matrix + 3
```
:::
:::

This creates a new object with the name *Small_matrix_3*. 

::: {.callout-important}
### Important:

What is the difference between a **variable** and an **object**? Why are `small_matrix` and `Small_matrix_3` considered both a variable and an object?

---

#### Explanation:

- A **variable** is a name used to store data. It acts like a label or container for a value. For example, when we write `small_matrix = np.zeros((3, 3))`, `small_matrix` is a variable that holds the matrix.

- An **object** is an instance of a class in Python. In this case, the value stored in `small_matrix` is an object of the `numpy.ndarray` class. This object has properties (like its shape) and methods (like matrix operations) that you can use.

Therefore, `small_matrix` is a variable (a name for storing data) and also an object (the data itself, which is a matrix object).
:::



::: {.callout-note}
### Exercises part 2:

1. **Create a Matrix**:  
   In both R and Python, write a code to create a 4x4 matrix filled with zeros. What is the variable's name, and what type of object does it store?

2. **Variable Assignment**:  
   Assign the number `10` to a variable named `my_number`. What happens if you assign a new value, like `20`, to the same variable afterward? Explain the behavior of variables in Python.

3. **Matrix Operations**:  
   Perform an operation that adds `5` to each element in the matrix you created in question 1.

Remember to think about how variables and objects work together in Python as you complete each task.
:::


## 3. Text, values and variables

A **variable** is like a labeled container that holds information (data). You give this container a name, and you can store anything inside it—like numbers, words, or even more complex data. An important distinction to make is the difference between numerical values and textual values. When we create a variable and a assign a number, this means we can later use this for mathematical operations. This needs to be differentiated from assigning the textual value "42".

::: columns
::: {.column width="45%"}
![](Rlogo.png)

```{r, eval=FALSE}
# assigning a number
variable_numeric <- 42 
# assigning text
variable_text <- "42"
```
:::

::: {.column width="10%"}
<!-- empty column to create gap -->
:::

::: {.column width="45%"}
![](Pythonlogo.png)

```{python, eval=FALSE}
# assigning a number
variable_numeric = 42 
# assigning text
variable_text = "42"
```
:::
:::

Any value between **"** is understood as text by python and R. This means that if we try to multiply variable by a number, we get an error in R and an unexpected output in Python. 


::: columns
::: {.column width="45%"}
![](Rlogo.png)

```{r, eval=F}
variable_text <- "42"
variable_text * 2
# Error in variable_text * 2 : non-numeric argument to binary operator
```
:::

::: {.column width="10%"}
<!-- empty column to create gap -->
:::

::: {.column width="45%"}
![](Pythonlogo.png)

```{python, eval=F}
variable_text = "42"
variable_text * 2
'4242'
```
:::
:::

A binary operator is for example +, -, /. When we try to use non-numeric values (here, "42") then we get this error message.
In python, the output is not an error, the string is simply multiplied literlly, resulting in a new string that is twice the previous sring: "4242" (which is not a number, still a string).


It's good practice, especially when loading data from an external source for the first time, to check the format of the data, *i.e* ensuring that what you want to be numbers are numbers, and what you want to be text is indeed, text.


::: columns
::: {.column width="45%"}
![](Rlogo.png)

```{r, eval=F}
variable_text <- "42"
# check if the variable is numeric:
is.numeric(variable_text)
# check if the variable is text:
is.character(variable_text)
# Error in variable_text * 2 : non-numeric argument to binary operator
```
:::

::: {.column width="10%"}
<!-- empty column to create gap -->
:::

::: {.column width="45%"}
![](Pythonlogo.png)

```{python, eval=F}
variable_text = "42"
# check if the variable is numeric:
isinstance(variable_text, float)
# check if the variable is text:
isinstance(variable_text, str)
```
:::
:::


::: {.callout-important}
### 1. **Integer** (`int`)
- Represents whole numbers, both positive and negative, without decimals.
- Example: `5`, `-42`, `100`

### 2. **Float** (`float`)
- Represents numbers that have a decimal point. It can store both positive and negative decimal numbers.
- Example: `3.14`, `-0.001`, `42.0`

### 3. **String** (`str`)
- Represents a sequence of characters (text), typically enclosed in single or double quotes.
- Example: `"Hello, world!"`, `'Python'`

### 4. **Boolean** (`bool`)
- Represents a value that is either `True` or `False`. Booleans are often used in conditions and logical operations.
- Example: `True`, `False`

### 5. **Logical** (This is equivalent to **Boolean** in Python)
- In Python, logical values are handled by the boolean (`bool`) type, where logical conditions return `True` or `False`.
- Example: `a == b` might evaluate to `True` or `False`.
:::


::: {.callout-note}
### Exercises part 3:

1. **Check numeric values**:  
   Assign numeric values to 2 variables. You can name them however you want and assign any numerical value.
   Check the format of the variable

2. **Check textual values**:  
   Assign a textual value to 2 variables. You can name them however you want and assign any numerical value.
   Check the format of the variable.
:::


## 4. Logic operators

Logical operators are commonly used in data analysis, especially when sub-setting datasets. For example when we want to extract documents that are from the year 2000 which have the term "sustainability" and the term "climate change" but not the term "fossil fuel". Combining these operators is important, and so is understanding how they work.

::: {.callout-note appearance="simple"}
## Pay Attention

Some differences between R and Python become apparent here. In R, **TRUE** and **FALSE** must be written in all caps to be recognised as the logical operator. In Python, **True** and **False** must start with a capitalized letter. **or**, **and**, **not** should also be written exactly in this manner.If these operators are written differently, they will be recognized as objects.
:::

::: columns
::: {.column width="45%"}
![](Rlogo.png)

```{r}
x <- 4
y <- 8
# Equal (==)
x == y
# And (&)
x == 4 & y == 8

# Or (|)
x == 4 | y == 8

# Not (!)
!y

# Combine
z <- "plop"
x == 4 & (y == 8 | z == "plop")
```
:::

::: {.column width="10%"}
<!-- empty column to create gap -->
:::

::: {.column width="45%"}
![](Pythonlogo.png)

```{python}
x = 4
y = 8
# Equal (==)
x == y
# And 
x == 4 and y == 8

# Or
x == 4 or y == 8

# Not
not x

# Combine
z = "plop"
x == 4 and (y == 8 or z == "plop")
```
:::
:::

In data analysis, we usually use operators to subset data. This means that we compare a variable to a value to check if it fits our criteria. For example, if we have a column that contains a year, and we only want observations with the year 2003, we will search for year == 2003. In this setting the R operators we just described will be the same. It is possible that these operators varie when different packages are used in python. For instance, in the context of the pandas package, **and** becomes **&**, **or** becomes **\|**, **not** becomes **\~**. We will adress these variations in the database manipulation chapter.


::: {.callout-note}
### Exercises part 4.

1. **Equality and Inequality**:
   - In both Python and R, write a condition that checks if the variable `x` is equal to `10` and print `"Equal"` if it is, otherwise print `"Not equal"`.
   
2. **Logical AND**:
   - Create two variables, `age` and `has_permission`. Write a condition that checks if `age` is greater than or equal to `18` **and** `has_permission` is `True` (or `TRUE` in R). Print `"Access granted"` if both conditions are met, otherwise print `"Access denied"`.

3. **Logical OR**:
   - In both Python and R, write a condition that checks if a number `n` is less than `5` **or** greater than `20`. If either condition is `True`, print `"Out of bounds"`, otherwise print `"Within bounds"`.

4. **NOT operator**:
   - Create a variable `logged_in` that is either `True` or `False`. Write a condition using the `not` operator (or `!` in R) to print `"Access restricted"` if the user is **not** logged in.

5. **Complex Condition**:
   - In both Python and R, write a condition that checks whether a number `x` is between `10` and `50` **and** either `x` is even **or** `x` is divisible by `7`. Print a message that reflects the result.
:::


## 5. The print and paste functions

The **print** function is crucial in programming because it allows developers to display information to the user or themselves during the development process. It provides immediate feedback, helping programmers debug code by checking the values of variables, verifying the flow of execution, or ensuring that certain conditions are met. Without **print**, it would be challenging to observe how the program behaves internally, making it a vital tool for both learning and real-world software development.

A very basic example of this is printng out the value of a variable in the context of what it represents. Imagine that we are working on a project in which we start with some raw data, that we clean, step by step before we can start using it for a regression. In this process we remove missing values, outdates values, we might removes some regions etc. To make sure we don't remove to much data, or even just to be sure we don't make a mistake, we can decide to print out some information at different steps. The **print** function allows us to print out this type of information:

::: columns
::: {.column width="45%"}
![](Rlogo.png)

```{r, eval=F}
plop <- 42
# print a numeric value
print(plop)
# print text, remember to use "" for text
print("Step 3 is done")
```
:::
  
::: {.column width="10%"}
<!-- empty column to create gap -->
:::
  
::: {.column width="45%"}
![](Pythonlogo.png)

```{python, eval=F}
plop = 42
# print a numeric value
print(plop)
# print text, remember to use "" for text
print("Step 3 is done")
```
:::
:::


We can make things more interesting by combining values and text. For this we use the **paste** function in R and the "+" operator in python:



::: columns
::: {.column width="45%"}
![](Rlogo.png)

```{r, eval=T}
# lets create a value at random and then print out the sentence: "the number generated was x"
# we use the runif function to generate a value
# this function takes three arguments, n, min and max. 
# n is the number of numbers we want to generate, min and max are the boundaries for the value
x <- runif(1, min = 0, max = 5)
# here we generate one number with a value between 0  and 5.
# Now we want to print out the sentence "the number generated was x"
# for this we are going to paste the text "the number generated was" and the value of x:
paste("The number generated was ", x)
# the paste function can take as many argument as you want, it will paste all of them together
# Now if we want to print the result:
print(paste("The number generated was ", x))
```
:::
  
::: {.column width="10%"}
<!-- empty column to create gap -->
:::
  
::: {.column width="45%"}
![](Pythonlogo.png)

```{python, eval=T}
import random

# Generate a random value between 0 and 5 using random.uniform()
x = random.uniform(0, 5)

# Print out the sentence "The number generated was x" using an f-string (formatted string)
# to print a combination of text and variables, put an "f" before the string
# put the name of the variable between {}:
message = f"The number generated was  {x}"
print(message)
```
:::
:::



::: {.callout-note}
### Exercises: Using `paste()` and `print()`

1. **Concatenating Text and Numbers**:
   - Generate a random number between 1 and 100 using the `runif()` function in R or `random.uniform()` in Python. Print a sentence that says, "The generated number is x", where `x` is the random number.


2. **rithmetic Results in Sentences**:
  - Create two variables a and b, with values of your choice. Calculate the sum, difference, and product of a and b, then print the results in complete sentences, e.g., "The sum of a and b is x".
  
3. **Boolean Comparisons in Text:**
  - Create two numbers, x and y. Write an expression that checks if x is greater than y. Print a sentence   that says, "It is TRUE/FALSE that x is greater than y", depending on the result of the comparison.
:::  



## 6. Using functions

R and python can be quite different when it comes to using functions. We will discuss them separately.

### 6.1 Functions in R

#### 6.1.1 Using existing functions

Calling a function always works in the same way in R, the construction always follows:

-   Name of the function: paste(), print(), matrix(), data.frame(), as.numeric()
-   Between parenthesis we add the arguments of the function: matrix(nrow = 10, ncol = 3, 0)

![](Function_detail_R.png)


Which arguments a function needs, and the format of these arguments can always be found in the help of rstudio. If you're unsure how a function works, look it up, there is also always an example at the end of the help page.

We can combine multiple functions in one line of code. The following creates a matrix and then transforms the matrix into a dataframe. 

```{r, eval = F}
Thesis_data_subset <- as.data.frame(matrix(0, nrow = 20, ncol = 3))
```

An alternative exists in base R to make this easier to read. We can use what is called a pipe: "|>":

```{r, eval = F}
Thesis_data_subset <-  matrix(0, nrow = 20, ncol = 3) |> as.data.frame()
```

This line creates the matrix and then applies the as.data.frame() function. Equivalent to this is the pipe that we find in the tidyverse:

```{r, eval = F}
library(tidyverse)
Thesis_data_subset <-  matrix(0, nrow = 20, ncol = 3) %>% as.data.frame()
```

The latter is often found in data science with R manuals.

#### 6.1.2 Working with your own functions

We do not expect you to make your own functions. We only want you to be able to identify costum functions in a script.

In R, a function is defined by the function function...let me clarify:

```{r, eval = F}
my_own_function <- function(argument){
  return(something)
}

```

We create here a new function called **my_own_function**, which has one argument. Everything between brackets is the codes that is executed when the function is called.

For example, we could make a function that returns a greeting when supplied with a name. In other words, when you enter a name, the function will return "Hi, name":

```{r, eval = F}
greet <- function(name){
  print(paste("Hi", name))
}
```

We create a function called "greet" which takes one argument which is the name. It then returns the text "Hi, name".

If you see a function in a script, all you have to do is run the code once. This will load the function, just like the import function. You are then ready to use the function. 


### 6.2 Functions in Python

#### 6.2.2 Using existing functions

When you see something between parentheses in Python, it usually indicates:

You're calling a function, and the value between parentheses is an argument being passed to the function.
For example, print("Hello") calls the print() function with the argument "Hello".

In Python, dot notation (.) is used to access attributes or methods (functions) of objects. For example, numpy is a package that provides arrays and various mathematical functions, and you access specific functionality within numpy using dot notation. For example:

```{python, eval = F}
import numpy as np
# Create a NumPy array
data = np.array([1, 2, 3, 4])
# Access the shape of the array using dot notation
print(data.shape)  # Outputs the shape (dimensions) of the array
```

In this case, data is a NumPy array object, and data.shape is an attribute (a property) that tells us the dimensions of the array. The dot (.) is used to access this attribute from the data object.

Similarly, if you call a method of an object (a function that belongs to the object), you also use dot notation with parentheses:

```{python, eval = F}
# Using a method to reshape the array
data_reshaped = data.reshape(2, 2)  # Calls the reshape method to change the array dimensions
```

- np.array(): This is a function from the numpy module that creates an array.
- data.shape: This accesses an attribute of the array data (no parentheses because it’s an attribute, not a function).
- data.reshape(): This calls a method that modifies the array (parentheses are used because it’s a function).


::: {.callout-important}
### Important:
- Parentheses are used to call functions, and the values inside them are arguments.
- Dot notation is used to access methods or attributes of an object, like using np.array() to create a NumPy array or data.shape to get the dimensions of an array.
- Methods (functions that belong to objects) also use parentheses, but attributes (like data.shape) don’t.

:::

#### 6.2.2 Working with your own functions

We do not expect you to make your own functions. We only want you to be able to identify costum functions in a script.

In Python, functions are defined using the `def` keyword, followed by the function name, parentheses `()`, and a colon `:`. Inside the parentheses, you can specify any input parameters (arguments) that the function will take. The code that the function executes is indented, and you can use the `return` statement to send back a result:

```{python, eval = F}
def function_name(parameters):
    # Code block (indented)
    return result
```


For example, we could make a function that returns a greeting when supplied with a name. In other words, when you enter a name, the function will return "Hi, name":

```{python, eval = F}
def greet(name):
    return f"Hi, {name}!"
```

We create a function called "greet" which takes one argument which is the name. It then returns the text "Hi, name".

If you see a function in a script, all you have to do is run the code once. This will load the function, just like the import function. You are then ready to use the function. 





